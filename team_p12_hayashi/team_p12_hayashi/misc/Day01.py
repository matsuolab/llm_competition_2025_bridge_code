#　-*- coding: utf-8 -*-
import sys
import os
import re
import struct
import binascii
import numpy as np
# -------------------------------------------------------
# 1. ライブラリーのインポート, データ読込み
# ライブラリーのインポート
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# # -------------------------------------------------------
import json
import csv
from typing import Iterable, Dict, Any
# # -------------------------------------------------------
# # SFTモデル学習ログjsonファイルを指定
# INPUT_JSON = "judged_omni_math_1000_Qwen3-32B.json"   # ここを出力JSONのパスに
# INPUT_JSON = "judged_omni_math_1000_Qwen3-32B_01.json"
# INPUT_JSON = "judged_omni_math_1000_Qwen3-32B_02.json"
# INPUT_JSON = "judged_HLE_200_x3_Qwen3-235B-A22B_1.json"
# INPUT_JSON = "judged_HLE_200_x3_Qwen3-235B-A22B_2.json"
# INPUT_JSON = "judged_HLE500x1_Qwen_235B_SFT_01.json"
# INPUT_JSON = "judged_HLE500x1_Qwen_235B_SFT_02.json"
# INPUT_JSON = "judged_HLE500x1_Qwen_235B_SFT_03.json"
INPUT_JSON = "judged_HLE500x1_Qwen_235B_SFT_04.json"
# # -------------------------------------------------------
# # -------------------------------------------------------
fname = INPUT_JSON[:-5]
OUTPUT_CSV = fname + ".csv"    # 出力CSVのパス

def iter_records(data: Any) -> Iterable[Dict[str, Any]]:
    """
    JSONの構造の揺れを吸収して {id, judge_response} を取り出すイテレータ。
    サポート:
      1) dict 形式: { "default-1031": { "judge_response": {...} }, ... }
      2) list[ dict ] 形式:
         a) [ { "default-1031": { "judge_response": {...} } }, ... ]
         b) [ { "id": "default-1031", "judge_response": {...} }, ... ]
    """
    if isinstance(data, dict):
        for k, v in data.items():
            # k が ID（例: "default-1031"）で v に judge_response があるケース
            if isinstance(v, dict):
                yield {"id": str(k), "judge_response": v.get("judge_response", {})}
    elif isinstance(data, list):
        for item in data:
            if not isinstance(item, dict):
                continue
            # パターン 2a: 要素が { "default-1031": {...} } の単一キー辞書
            if len(item) == 1:
                (only_key, only_val), = item.items()
                if isinstance(only_val, dict):
                    yield {"id": str(only_key), "judge_response": only_val.get("judge_response", {})}
                continue
            # パターン 2b: 要素に "id" と "judge_response" を直接持つ
            id_val = item.get("id")
            jr = item.get("judge_response", {})
            if id_val is not None and isinstance(jr, dict):
                yield {"id": str(id_val), "judge_response": jr}

def main():
    with open(INPUT_JSON, "r", encoding="utf-8") as f:
        data = json.load(f)

    rows = []
    for rec in iter_records(data):
        jr = rec.get("judge_response", {}) or {}
        rows.append({
            "id": rec.get("id", ""),
            "correct_answer": jr.get("correct_answer", ""),
            "correct": jr.get("correct", ""),
            "confidence": jr.get("confidence", ""),
        })

    # CSV出力（UTF-8、Excelで文字化けする場合は encoding="cp932" などに変更）
    fieldnames = ["id", "correct_answer", "correct", "confidence"]
    with open(OUTPUT_CSV, "w", newline="", encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(rows)

if __name__ == "__main__":
    main()
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------

