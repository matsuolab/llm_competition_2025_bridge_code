#　-*- coding: utf-8 -*-
import sys
import os
import re
import struct
import binascii
import numpy as np
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# # -------------------------------------------------------
# # -------------------------------------------------------
import pandas as pd
import pyarrow as pa
import pyarrow.parquet as pq
import pathlib
import math

# ==== 設定 ====
csv_path = "AIME2024_Q.csv"  # 変換するCSVファイル名
# csv_path = "AIME2024_QwFullH.csv"
# csv_path = "AIME2024_QwHalfH.csv"
# csv_path = "AIME2024_QwOneH.csv"
# csv_path = "AIME2024_QwFullH_x16.csv"
# csv_path = "AIME2024_QwHalfH_x16.csv"
# csv_path = "AIME2024_QwOneH_x16.csv"
# csv_path = "AIME2025_Q.csv"

ADD_THINK_TAGS = True   # Trueなら<think>…</think><answer>…</answer>を付与
GEN_ID = False          # CSVにID列が無い場合、自動でbasename-連番のidを生成
# ==============

fname = csv_path[:-4]
parquet_path = fname + "_extra.parquet"   # 例: AIME2024_QwOneH_x16.parquet

# CSV読み込み（必要なら encoding="utf-8" や "cp932" を指定）
df = pd.read_csv(csv_path)

# 必須列チェック（Question/Answer は必須、Think は任意）
required_columns = {"Question", "Answer"}
if not required_columns.issubset(df.columns):
    raise ValueError(f"CSV file must contain: {required_columns}")

# 欠損除去（Question/Answer が NaN の行を除外）
df = df.dropna(subset=["Question", "Answer"]).reset_index(drop=True)

# Answer 正規化（<think>/<answer>タグの付与はフラグで制御）
def build_answer(answer, think=None, add_think=True):
    a = "" if answer is None or (isinstance(answer, float) and math.isnan(answer)) else str(answer).strip()
    t = "" if think is None or (isinstance(think, float) and math.isnan(think)) else str(think).strip()
    if not add_think:
        return a
    # add_think=True の場合は <think>/<answer> で包む
    return f"<think>{t}</think><answer>{a}</answer>"

# extra_info 列を作成： {"question": ..., "answer": ...}
if "Think" in df.columns:
    df["extra_info"] = [
        {
            "question": str(q).strip(),
            "answer": build_answer(a, t, add_think=ADD_THINK_TAGS),
        }
        for q, a, t in zip(df["Question"], df["Answer"], df["Think"])
    ]
else:
    df["extra_info"] = [
        {
            "question": str(q).strip(),
            "answer": build_answer(a, None, add_think=ADD_THINK_TAGS),
        }
        for q, a in zip(df["Question"], df["Answer"])
    ]

# ID列処理（任意）
stem = pathlib.Path(csv_path).stem
if "ID" in df.columns:
    df = df.rename(columns={"ID": "id"})
elif GEN_ID:
    df["id"] = [f"{stem}-{i:06d}" for i in range(len(df))]

# 保存用データフレーム（id があれば保持）
cols = ["extra_info"]
if "id" in df.columns:
    cols = ["id"] + cols
out_df = df[cols].copy()

# Parquet保存（Snappy圧縮）
table = pa.Table.from_pandas(out_df, preserve_index=False)
pq.write_table(table, parquet_path, compression="snappy")

print(f"Parquet file saved to: {parquet_path}, rows={len(out_df)}, cols={list(out_df.columns)}")
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------
# # -------------------------------------------------------

