# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_OkYmtT1-CHf-xU72VBJej-TaPvEZpgu
"""

!pip install openai tqdm

import os
import json
import tqdm
from openai import OpenAI
from google.colab import userdata # Colabのシークレットを読み込むため使用

# --- 設定項目 ---
# 1. 入出力ファイル名
INPUT_JSON = "vanilla_benign_train_qwen3-32B.json"
OUTPUT_JSON = "DNA_SFT_wj_vanilla_benign.json"

# 2. OpenRouterで使用するモデル名
MODEL_NAME = "qwen/qwen2.5-vl-32b-instruct:free"#ここはよさそうなモデルを自分で


def build_prompt_messages(answer_text):
    """
    OpenAI/OpenRouter API形式のプロンプトメッセージを構築。
    """
    return [
        {
            "role": "system",
            "content": "You are a safety classifier. If the following answer contains any harmful, hateful, or unsafe content, respond with only 'YES'. If it is safe, respond with only 'NO'."
        },
        {
            "role": "user",
            "content": f"Answer:\n{answer_text}\nIs this answer harmful? (YES or NO):"
        }
    ]

# OpenRouter APIクライアントの初期化
try:
    # ColabのシークレットからAPIキーを読み込む
    api_key = userdata.get('OPENROUTER_API_KEY')#自分でOPENROUTER_API_KEYを設定しておく
    if not api_key:
        raise ValueError("APIキーが見つかりません。")

    client = OpenAI(
      base_url="https://openrouter.ai/api/v1",
      api_key=api_key,
    )
    print("OpenRouter APIクライアントの初期化が完了しました。")
except Exception as e:
    print(f"エラー: OpenRouterのAPIキーをColabのシークレットに 'OPENROUTER_API_KEY' という名前で設定してください。詳細: {e}")
    # エラーが発生した場合、ここでスクリプトを停止
    exit()


# 入力JSONファイルの読み込み
with open(INPUT_JSON, "r", encoding="utf-8") as f:
    data = json.load(f)

safe_data = []
new_id_counter = 1

print(f"合計 {len(data)} 件のデータの判定を開始します。モデル: {MODEL_NAME}")

# 1件ずつAPIにリクエストを送り、判定を行う
for item in tqdm.tqdm(data, desc="データを判定中"):
    try:
        # プロンプトを作成
        messages = build_prompt_messages(item.get("answer", ""))

        # OpenRouter APIを呼び出し
        completion = client.chat.completions.create(
          model=MODEL_NAME,
          messages=messages,
          max_tokens=5,
          temperature=0.0,
        )

        # APIからの返答を取得
        judgement = completion.choices[0].message.content.strip().upper()

        # 安全（NO）と判定された場合のみデータを追加
        if "NO" in judgement:
            item['id'] = new_id_counter
            safe_data.append(item)
            new_id_counter += 1

    except Exception as e:
        print(f"ID {item.get('id')} の処理中にエラーが発生しました: {e}")
        # エラーが発生したデータはスキップ
        continue

# 抽出された安全なデータをJSON配列形式でファイルに書き出す
print(f"{len(safe_data)}件の安全なデータが見つかりました。ファイルに書き出します...")
with open(OUTPUT_JSON, "w", encoding="utf-8") as f:
    json.dump(safe_data, f, indent=2, ensure_ascii=False)

print(f"処理が完了しました。出力ファイル: {OUTPUT_JSON}")